package com.shinhan.day08;

import java.io.InputStream;

public class ExceptionTest {
	public static void main(String[] args) {
		method4(10);
	}
	
	private static void method4(int i) {
		Book a = new Book();
		try {
			Class.forName("com.shinhan.day09.Book");
		}catch(ClassNotFoundException ex) {
			ex.printStackTrace();
		}
		System.out.println("**********************");
		
		
	}

	private static void method2(int i) {
		//일반 Exception(RuntimeExcpion이 아닌 Exception) 컴파일 시에 check
		//반드시 Excption처리를 해야한다
		//1.내가 한다. 2)떠넘긴다. (나를 부른곳으로 떠넘긴다)
		InputStream input = System.in;
//		int data= input.read();
		try {
			int data = input.read();
			System.out.println((char)data);

		} catch(RuntimeException ex) {
			ex.printStackTrace();
		}
		System.out.println();
	}
	
	private static void method1(int count) {
		//예외 : 1)RuntimeException...실행 시 오류발생 2)일반Exception
		int score = 100;
		int[] arr = new int[10];
		String s = "100";
		
		//if(count == 0) return;
		//오류처리로직과 비즈니스로직 처리가 섞인다. 권장하지 않음
		
		//try-catce : 오류처리로직과 비지니스로직 처리를 섞을 수 있다.
		
		try {
			System.out.println("평균은 " + score/count);
			arr[9] =99;
			System.out.println(arr[9]);
			System.out.println(Integer.parseInt(s )+ 200);
		} catch(ArithmeticException ex) {
			//Exception 처리함...그러므로 프로그램 중단없이 계속 진행된다.
			System.out.println("연산오류....." + ex.getMessage());
		} catch(NullPointerException ex) {
			//Exception 처리함...그러므로 프로그램 중단없이 계속 진행된다.
			System.out.println("연산오류....." + ex.getMessage());
		} catch(ArrayIndexOutOfBoundsException ex) {
			//Exception 처리함...그러므로 프로그램 중단없이 계속 진행된다.
			System.out.println("연산오류....." + ex.getMessage());
		} catch(NumberFormatException ex) {
			//Exception 처리함...그러므로 프로그램 중단없이 계속 진행된다.
			System.out.println("연산오류....." + ex.getMessage());
		} finally {
			System.out.println("오류가 있거나 없거나 무조건 수행하는 업무이다.");
		}
		System.out.println("-----------------------------------------");
	}
}
